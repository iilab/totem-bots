#!/usr/bin/env python

import os, hmac, hashlib, time, sys
from router import Router

####################################
# config
####################################
basepath='..'

debug=1

botjid='totem@jabber.ccc.de'
WWW_DATA = 33

hooks=['hook-otr-start', 'hook-post-message-in', 'hook-otr-smp']
states=['', 'otr', 'smp', 'smpdancer1']
defaulthooks=['hook-post-message-in', 'hook-otr-start']

####################################
# globals
####################################
router=Router(hooks,states)

class Context(object):
    def __init__(self):
        self.__dict__['hook']=os.getenv('hook')
        self.__dict__['jid']=os.getenv('jid')
        self.__dict__['message']=os.getenv('message')
        self.__dict__['matches']=None

        # this is the main application secret shared with lamson and django
        with open('%s/secret' % basepath,'r') as f:
            self.__dict__['secret']=f.read().strip()

        # key is the hmac(secret, jid) for reference of users in the fs
        self.__dict__['key']=hmac.new(self.secret, self.jid, hashlib.sha256).hexdigest()

        self.__dict__['type']=os.getenv('type')

        self.debug()

    ####################################
    # helper functions
    ####################################

    def __repr__(self):
        return u"\nCTX: %s %s\n%s\nsmpsec: %s\nkey: %s\n" % (self.state, self.hook. self.message, self.smpsecret, self.key)

    def handler(self):
        router.dispatch(self)

    def debug(self):
        if debug:
            with open('/tmp/onolog', 'a') as log:
                print >>log, 'hook="%s" jid="%s" message=%s type="%s"' % (self.hook, self.jid, repr(self.message), self.type)
                print >>log, "hook", self.hook
                print >>log, "jid", self.jid
                print >>log, "msg", self.message
                print >>log, "smpsecret", not not self.smpsecret
                print >>log, "key", self.key
                print >>log, "state", self.state
                print >>log, "type", self.type
                print >>log, '------------------'

    def say(self, msg):
        self.cmd("say_to -q %s %s\n" % (self.jid, msg))

    def cmd(self, cmd):
        with open('%s/otr/mcabber.fifo' % basepath, 'a') as fd:
            fd.write("%s\n" % cmd)

    def __getattr__(self, name):
        if name not in self.__dict__ and name in ('state', 'acc', 'smpsecret'):
            try:
                with open('%s/data/%s/%s' % (basepath, self.key, name), 'r') as fd:
                    return fd.read()
            except IOError:
                return ''
        if name in self.__dict__.keys():
            return self.__dict__[name]
        else:
            raise AttributeError, name

    def __setattr__(self, name, value):
        if name not in self.__dict__ and name in ('state', 'acc', 'smpsecret'):
            self.__dict__[name]=value
            p = '%s/data/%s' % (basepath, self.key)
            if not os.path.exists(p):
                os.mkdir(p)
                os.chown(p, -1, WWW_DATA)
                os.chmod(p, 0775)
            with open('%s/data/%s/%s' % (basepath, self.key, name), 'w') as fd:
                fd.write(value)
        elif name in self.__dict__.keys():
            self.__dict__[name]=value
        else: 
            raise AttributeError, name

####################################
# routes
####################################

@router(pattern="resetme", states=states, hooks=['hook-post-message-in'])
def _(ctx):
    ctx.state = ''

@router(states=[''], hooks=['hook-post-message-in'] )
def _(ctx):
   ctx.say("Ok. Let me start an encrypted OTR session.")
   ctx.cmd("otr start %s" % (ctx.jid))

@router(states=[''], hooks=['hook-otr-start'] )
def otr(ctx):
    ctx.cmd("otrpolicy%s always" % ctx.jid)
    ctx.say("Ok %s, our communications are now encrypted! We should establish some kind of trust for our upcoming communication." % (ctx.jid.split('@')[0]))
    ctx.say("Please complete the shared secret verification with me! You can find the shared secret on your totem course.")
    ctx.cmd("otr smpq %s %s" % (ctx.jid, ctx.smpsecret))
    ctx.state = 'smp'

@router(states=['otr', 'smp'], hooks=['hook-otr-smp'] )
def _(ctx):
    smpstate=os.getenv('state')
    if smpstate == "Ok":
        ctx.say("Hi, good you're here. We have an encrypted *and* trusted communication now!"
                "You're ready to start the next exercise now.")
        ctx.state = 'smpdancer1'
    elif smpstate == "Init":
        ctx.say("Hey, you should respond to a SMP request, not initiate one. I'm initiating a new one now.")
        ctx.cmd("otr smpq %s %s" % (ctx.jid, ctx.smpsecret))
        # needed for the response (another to-b-implemented totem test)
        #ctx.cmd("otr smpr %s %s" % (ctx.jid, ctx.smpsecret))
    elif smpstate != "Response":
        ctx.say("That didn't work: %s" % smpstate)
        ctx.say("I'm initiating a new SMP request now.")
        ctx.cmd("otr smpq %s %s" % (ctx.jid, ctx.smpsecret))

@router(states=['smpdancer1'], hooks=defaulthooks)
def _(ctx):
    ctx.say("You have successfully responded to an OTR/SMP verification.")

####################################

if __name__ == "__main__":
    try:
        Context().handler()
    except:
        import traceback
        with open('/tmp/onolog', 'a') as log:
            print >>log, traceback.format_exc()
