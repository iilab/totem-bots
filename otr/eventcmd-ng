#!/usr/bin/env python

import os, hmac, hashlib, time, sys
from router import Router
basepath='..'
#from config import botjid
#from game import ono_rand_id, append_table, get_val,first, add_state, get_state

####################################
# config
####################################
debug=1

botjid='totem@jabber.ccc.de'
WWW_DATA = 33

hooks=['hook-otr-start', 'hook-post-message-in', 'hook-otr-smp']
states=['', 'otr', 'smp', 'smpdancer', 'getpks01', 'pks01pwd', 'level01done', 'datasheet', 'level02done']
defaulthooks=['hook-post-message-in', 'hook-otr-start']

####################################
# globals
####################################
router=Router(hooks,states)

class Context(object):
    def __init__(self):
        self.__dict__['hook']=os.getenv('hook')
        self.__dict__['jid']=os.getenv('jid')
        self.__dict__['message']=os.getenv('message')
        self.__dict__['matches']=None

        # this is the main application secret shared with lamson and django
        with open('%s/secret' % basepath,'r') as f:
            self.__dict__['secret']=f.read().strip()

        # key is the hmac(secret, jid) for reference of users in the fs
        self.__dict__['key']=hmac.new(self.secret, self.jid, hashlib.sha256).hexdigest()

        self.__dict__['type']=os.getenv('type')

        self.debug()

    ####################################
    # helper functions
    ####################################

    def __repr__(self):
        return u"\nCTX: %s %s\n%s\nsmpsec: %s\nkey: %s\n" % (self.state, self.hook. self.message, self.smpsecret, self.key)

    def handler(self):
        router.dispatch(self)

    def debug(self):
        if debug:
            with open('/tmp/onolog', 'a') as log:
                print >>log, 'hook="%s" jid="%s" message=%s type="%s"' % (self.hook, self.jid, repr(self.message), self.type)
                print >>log, "hook", self.hook
                print >>log, "jid", self.jid
                print >>log, "msg", self.message
                print >>log, "smpsecret", not not self.smpsecret
                print >>log, "key", self.key
                print >>log, "state", self.state
                print >>log, "type", self.type
                print >>log, '------------------'

    def say(self, msg):
        time.sleep(len(msg)/40)
        with open('%s/otr/mcabber.fifo' % basepath, 'a') as fd:
            fd.write("say_to -q %s %s\n" % (self.jid, msg))

    def cmd(self, cmd):
        with open('%s/otr/mcabber.fifo' % basepath, 'a') as fd:
            fd.write("%s\n" % cmd)

    def __getattr__(self, name):
        if name not in self.__dict__ and name in ('state', 'acc', 'smpsecret'):
            try:
                with open('%s/data/%s/%s' % (basepath, self.key, name), 'r') as fd:
                    return fd.read()
            except IOError:
                return ''
        if name in self.__dict__.keys():
            return self.__dict__[name]
        else:
            raise AttributeError, name

    def __setattr__(self, name, value):
        if name not in self.__dict__ and name in ('state', 'acc', 'smpsecret'):
            self.__dict__[name]=value
            p = '%s/data/%s' % (basepath, self.key)
            if not os.path.exists(p):
                os.mkdir(p)
                os.chown(p, -1, WWW_DATA)
                os.chmod(p, 0775)
            with open('%s/data/%s/%s' % (basepath, self.key, name), 'w') as fd:
                fd.write(value)
        elif name in self.__dict__.keys():
            self.__dict__[name]=value
        else: 
            raise AttributeError, name

####################################
# routes
####################################

#   ctx.say("Hey %s, good to see you!" % (ctx.jid.split('@')[0]))
#   ctx.cmd("otr start %s" % (ctx.jid))

# start
@router(states=[''], hooks=['hook-subscription'] )
def _(ctx):
   if ctx.type=='subscribe':
      ctx.cmd("event %s accept" % ctx.message)
      greet1(ctx)

@router(states=[''], hooks=['hook-post-message-in'] )
def plain(ctx):
    if not ctx.smpsecret:
        greet1(ctx)
    else:
        ctx.say("I recognize you, before we establish trust, let me try to (re)start the encryption.")
        ctx.cmd("otr start %s" % (ctx.jid))
        ctx.state = 'otr'

@router(states=['otr'], hooks=defaulthooks )
def otr(ctx):
    if not ctx.smpsecret:
        ctx.cmd("otrpolicy %s always" % ctx.jid)
        ctx.say("Hey %s, good to see you! We should establish some kind of trust for our upcoming communication." % (ctx.jid.split('@')[0]))
        ctx.say("Please go back to the totem course and start a shared secret verification with me!")
#        ctx.say("to get a one time usable shared secret between us two, then come back.")
        ctx.state = 'smp'
    else:
        startsmp(ctx)

# start + otr -> smp
@router(states=[''], hooks=['hook-otr-start'] )
def _(ctx):
    ctx.state = 'otr'
    otr(ctx)

@router(states=['smp'], hooks=defaulthooks)
def _(ctx):
    if not ctx.smpsecret:
        ctx.say("Having trouble? Maybe someone from the tactical technology collective can help?")
        ctx.say("To continue go to: https://game.onorobot.org/buddy")
        ctx.say("to get a one time usable shared secret between us two, then come back.")
    else:
        startsmp(ctx)

def startsmp(ctx):
    ctx.say("Hi, good you're here. *finally*. I've been waiting for you. How are you doing?")
    ctx.say("Saving the world is a serious thing. It's good that we have set up a chat connection,"
        "but we need to make sure that we can connect securely. To do this we need to do two things."
        " We need to make sure that the chat is 'encrypted', which means that only the sender and the"
        " receiver can read the message. We also need to verify each others identity to make sure"
        " that we both really are who we say we are. On other words, you need to check that I'm really"
        " Ono. Everything clear thus far?")
    ctx.say("You should answer the question with the secret from the webpage "
            "earlier. (https://game.onorobot.org/buddy)")
    ctx.cmd("otr smpq %s %s" % (ctx.jid, ctx.smpsecret))

@router(states=['otr', 'smp'], hooks=['hook-otr-smp'] )
def _(ctx):
    if not ctx.smpsecret:
        ctx.say("We have no shared secret, wanna do a telepathic diffie-hellman perhaps?")
        ctx.say("Did you misstype your jabber address perhaps?")
        ctx.say("You might want go to: https://game.onorobot.org/buddy")
        ctx.say("... to get yourself a secret, that we can use for establishing our trust.")
        if ctx.state != 'smp': ctx.state = 'smp'
    else:
        smpstate=os.getenv('state')
        if smpstate == "Ok":
            ctx.say("Fantastico now this communication is completed in a secure manner. "
                "I will hang up now, and you can go back to the page for the "
                "next challenge: http://game.onorobot.org/yay1")
            ctx.state = 'smpdancer'
        elif smpstate == "Init":
            ctx.cmd("otr smpr %s %s" % (ctx.jid, ctx.smpsecret))
        elif smpstate != "Response":
            ctx.say("That didn't work: %s" % smpstate)

@router(states=['smpdancer'], hooks=defaulthooks)
def _(ctx):
    ctx.say("Great, now that we can chat securely, I was hoping you could help me retrieve a secret file. " \
        "I dropped the file in a dropbox a while ago, but now the site is being blocked so I cannot access" \
        " it. Can you have a look? http://game.onorobot.org/robotdropbox")
    ctx.state = 'getpks01'

####################################

if __name__ == "__main__":
    try:
        Context().handler()
    except:
        import traceback
        with open('/tmp/onolog', 'a') as log:
            print >>log, traceback.format_exc()
